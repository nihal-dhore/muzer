/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/youtube-search-api@1.2.2";
exports.ids = ["vendor-chunks/youtube-search-api@1.2.2"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/youtube-search-api@1.2.2/node_modules/youtube-search-api/index.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/.pnpm/youtube-search-api@1.2.2/node_modules/youtube-search-api/index.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const axios = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/.pnpm/axios@0.21.4/node_modules/axios/index.js\");\nconst youtubeEndpoint = `https://www.youtube.com`;\n\nconst GetYoutubeInitData = async (url) => {\n  var initdata = await {};\n  var apiToken = await null;\n  var context = await null;\n  try {\n    const page = await axios.get(encodeURI(url));\n    const ytInitData = await page.data.split(\"var ytInitialData =\");\n    if (ytInitData && ytInitData.length > 1) {\n      const data = await ytInitData[1].split(\"</script>\")[0].slice(0, -1);\n\n      if (page.data.split(\"innertubeApiKey\").length > 0) {\n        apiToken = await page.data\n          .split(\"innertubeApiKey\")[1]\n          .trim()\n          .split(\",\")[0]\n          .split('\"')[2];\n      }\n\n      if (page.data.split(\"INNERTUBE_CONTEXT\").length > 0) {\n        context = await JSON.parse(\n          page.data.split(\"INNERTUBE_CONTEXT\")[1].trim().slice(2, -2)\n        );\n      }\n\n      initdata = await JSON.parse(data);\n      return await Promise.resolve({ initdata, apiToken, context });\n    } else {\n      console.error(\"cannot_get_init_data\");\n      return await Promise.reject(\"cannot_get_init_data\");\n    }\n  } catch (ex) {\n    await console.error(ex);\n    return await Promise.reject(ex);\n  }\n};\n\nconst GetYoutubePlayerDetail = async (url) => {\n  var initdata = await {};\n  try {\n    const page = await axios.get(encodeURI(url));\n    const ytInitData = await page.data.split(\"var ytInitialPlayerResponse =\");\n    if (ytInitData && ytInitData.length > 1) {\n      const data = await ytInitData[1].split(\"</script>\")[0].slice(0, -1);\n      initdata = await JSON.parse(data);\n      return await Promise.resolve({ ...initdata.videoDetails });\n    } else {\n      console.error(\"cannot_get_player_data\");\n      return await Promise.reject(\"cannot_get_player_data\");\n    }\n  } catch (ex) {\n    await console.error(ex);\n    return await Promise.reject(ex);\n  }\n};\n\nconst GetData = async (\n  keyword,\n  withPlaylist = false,\n  limit = 0,\n  options = []\n) => {\n  let endpoint = await `${youtubeEndpoint}/results?search_query=${keyword}`;\n  try {\n    if (Array.isArray(options) && options.length > 0) {\n      const type = options.find((z) => z.type);\n      if (typeof type == \"object\") {\n        if (typeof type.type == \"string\") {\n          switch (type.type.toLowerCase()) {\n            case \"video\":\n              endpoint = `${endpoint}&sp=EgIQAQ%3D%3D`;\n              break;\n            case \"channel\":\n              endpoint = `${endpoint}&sp=EgIQAg%3D%3D`;\n              break;\n            case \"playlist\":\n              endpoint = `${endpoint}&sp=EgIQAw%3D%3D`;\n              break;\n            case \"movie\":\n              endpoint = `${endpoint}&sp=EgIQBA%3D%3D`;\n              break;\n          }\n        }\n      }\n    }\n    const page = await GetYoutubeInitData(endpoint);\n\n    const sectionListRenderer = await page.initdata.contents\n      .twoColumnSearchResultsRenderer.primaryContents.sectionListRenderer;\n\n    let contToken = await {};\n\n    let items = await [];\n\n    await sectionListRenderer.contents.forEach((content) => {\n      if (content.continuationItemRenderer) {\n        contToken =\n          content.continuationItemRenderer.continuationEndpoint\n            .continuationCommand.token;\n      } else if (content.itemSectionRenderer) {\n        content.itemSectionRenderer.contents.forEach((item) => {\n          if (item.channelRenderer) {\n            let channelRenderer = item.channelRenderer;\n            items.push({\n              id: channelRenderer.channelId,\n              type: \"channel\",\n              thumbnail: channelRenderer.thumbnail,\n              title: channelRenderer.title.simpleText\n            });\n          } else {\n            let videoRender = item.videoRenderer;\n            let playListRender = item.playlistRenderer;\n\n            if (videoRender && videoRender.videoId) {\n              items.push(VideoRender(item));\n            }\n            if (withPlaylist) {\n              if (playListRender && playListRender.playlistId) {\n                items.push({\n                  id: playListRender.playlistId,\n                  type: \"playlist\",\n                  thumbnail: playListRender.thumbnails,\n                  title: playListRender.title.simpleText,\n                  length: playListRender.videoCount,\n                  videos: playListRender.videos,\n                  videoCount: playListRender.videoCount,\n                  isLive: false\n                });\n              }\n            }\n          }\n        });\n      }\n    });\n    const apiToken = await page.apiToken;\n    const context = await page.context;\n    const nextPageContext = await { context: context, continuation: contToken };\n    const itemsResult = limit != 0 ? items.slice(0, limit) : items;\n    return await Promise.resolve({\n      items: itemsResult,\n      nextPage: { nextPageToken: apiToken, nextPageContext: nextPageContext }\n    });\n  } catch (ex) {\n    await console.error(ex);\n    return await Promise.reject(ex);\n  }\n};\n\nconst nextPage = async (nextPage, withPlaylist = false, limit = 0) => {\n  const endpoint =\n    await `${youtubeEndpoint}/youtubei/v1/search?key=${nextPage.nextPageToken}`;\n  try {\n    const page = await axios.post(\n      encodeURI(endpoint),\n      nextPage.nextPageContext\n    );\n    const item1 =\n      page.data.onResponseReceivedCommands[0].appendContinuationItemsAction;\n    let items = [];\n    item1.continuationItems.forEach((conitem) => {\n      if (conitem.itemSectionRenderer) {\n        conitem.itemSectionRenderer.contents.forEach((item, index) => {\n          let videoRender = item.videoRenderer;\n          let playListRender = item.playlistRenderer;\n          if (videoRender && videoRender.videoId) {\n            items.push(VideoRender(item));\n          }\n          if (withPlaylist) {\n            if (playListRender && playListRender.playlistId) {\n              items.push({\n                id: playListRender.playlistId,\n                type: \"playlist\",\n                thumbnail: playListRender.thumbnails,\n                title: playListRender.title.simpleText,\n                length: playListRender.videoCount,\n                videos: GetPlaylistData(playListRender.playlistId)\n              });\n            }\n          }\n        });\n      } else if (conitem.continuationItemRenderer) {\n        nextPage.nextPageContext.continuation =\n          conitem.continuationItemRenderer.continuationEndpoint.continuationCommand.token;\n      }\n    });\n    const itemsResult = limit != 0 ? items.slice(0, limit) : items;\n    return await Promise.resolve({ items: itemsResult, nextPage: nextPage });\n  } catch (ex) {\n    await console.error(ex);\n    return await Promise.reject(ex);\n  }\n};\n\nconst GetPlaylistData = async (playlistId, limit = 0) => {\n  const endpoint = await `${youtubeEndpoint}/playlist?list=${playlistId}`;\n  try {\n    const initData = await GetYoutubeInitData(endpoint);\n    const sectionListRenderer = await initData.initdata;\n    const metadata = await sectionListRenderer.metadata;\n    if (sectionListRenderer && sectionListRenderer.contents) {\n      const videoItems = await sectionListRenderer.contents\n        .twoColumnBrowseResultsRenderer.tabs[0].tabRenderer.content\n        .sectionListRenderer.contents[0].itemSectionRenderer.contents[0]\n        .playlistVideoListRenderer.contents;\n      let items = await [];\n      await videoItems.forEach((item) => {\n        let videoRender = item.playlistVideoRenderer;\n        if (videoRender && videoRender.videoId) {\n          items.push(VideoRender(item));\n        }\n      });\n      const itemsResult = limit != 0 ? items.slice(0, limit) : items;\n      return await Promise.resolve({ items: itemsResult, metadata: metadata });\n    } else {\n      return await Promise.reject(\"invalid_playlist\");\n    }\n  } catch (ex) {\n    await console.error(ex);\n    return await Promise.reject(ex);\n  }\n};\n\nconst GetSuggestData = async (limit = 0) => {\n  const endpoint = await `${youtubeEndpoint}`;\n  try {\n    const page = await GetYoutubeInitData(endpoint);\n    const sectionListRenderer = await page.initdata.contents\n      .twoColumnBrowseResultsRenderer.tabs[0].tabRenderer.content\n      .richGridRenderer.contents;\n    let items = await [];\n    let otherItems = await [];\n    await sectionListRenderer.forEach((item) => {\n      if (item.richItemRenderer && item.richItemRenderer.content) {\n        let videoRender = item.richItemRenderer.content.videoRenderer;\n        if (videoRender && videoRender.videoId) {\n          items.push(VideoRender(item.richItemRenderer.content));\n        } else {\n          otherItems.push(videoRender);\n        }\n      }\n    });\n    const itemsResult = limit != 0 ? items.slice(0, limit) : items;\n    return await Promise.resolve({ items: itemsResult });\n  } catch (ex) {\n    await console.error(ex);\n    return await Promise.reject(ex);\n  }\n};\n\nconst GetChannelById = async (channelId) => {\n  const endpoint = await `${youtubeEndpoint}/channel/${channelId}`;\n  try {\n    const page = await GetYoutubeInitData(endpoint);\n    const tabs = page.initdata.contents.twoColumnBrowseResultsRenderer.tabs;\n    const items = tabs\n      .map((json) => {\n        if (json && json.tabRenderer) {\n          const tabRenderer = json.tabRenderer;\n          const title = tabRenderer.title;\n          const content = tabRenderer.content;\n          return { title, content };\n        }\n      })\n      .filter((y) => typeof y != \"undefined\");\n    return await Promise.resolve(items);\n  } catch (ex) {\n    return await Promise.reject(ex);\n  }\n};\n\nconst GetVideoDetails = async (videoId) => {\n  const endpoint = await `${youtubeEndpoint}/watch?v=${videoId}`;\n  try {\n    const page = await GetYoutubeInitData(endpoint);\n    const playerData = await GetYoutubePlayerDetail(endpoint);\n\n    const result = await page.initdata.contents.twoColumnWatchNextResults;\n    const firstContent = await result.results.results.contents[0]\n      .videoPrimaryInfoRenderer;\n    const secondContent = await result.results.results.contents[1]\n      .videoSecondaryInfoRenderer;\n    const res = await {\n      id: playerData.videoId,\n      title: firstContent.title.runs[0].text,\n      thumbnail: playerData.thumbnail,\n      isLive: firstContent.viewCount.videoViewCountRenderer.hasOwnProperty(\n        \"isLive\"\n      )\n        ? firstContent.viewCount.videoViewCountRenderer.isLive\n        : false,\n      channel:\n        playerData.author ||\n        secondContent.owner.videoOwnerRenderer.title.runs[0].text,\n      channelId: playerData.channelId,\n      description: playerData.shortDescription,\n      keywords: playerData.keywords,\n      suggestion: result.secondaryResults.secondaryResults.results\n        .filter((y) => y.hasOwnProperty(\"compactVideoRenderer\"))\n        .map((x) => compactVideoRenderer(x))\n    };\n\n    return await Promise.resolve(res);\n  } catch (ex) {\n    return await Promise.reject(ex);\n  }\n};\n\nconst VideoRender = (json) => {\n  try {\n    if (json && (json.videoRenderer || json.playlistVideoRenderer)) {\n      let videoRenderer = null;\n      if (json.videoRenderer) {\n        videoRenderer = json.videoRenderer;\n      } else if (json.playlistVideoRenderer) {\n        videoRenderer = json.playlistVideoRenderer;\n      }\n      var isLive = false;\n      if (\n        videoRenderer.badges &&\n        videoRenderer.badges.length > 0 &&\n        videoRenderer.badges[0].metadataBadgeRenderer &&\n        videoRenderer.badges[0].metadataBadgeRenderer.style ==\n          \"BADGE_STYLE_TYPE_LIVE_NOW\"\n      ) {\n        isLive = true;\n      }\n      if (videoRenderer.thumbnailOverlays) {\n        videoRenderer.thumbnailOverlays.forEach((item) => {\n          if (\n            item.thumbnailOverlayTimeStatusRenderer &&\n            item.thumbnailOverlayTimeStatusRenderer.style &&\n            item.thumbnailOverlayTimeStatusRenderer.style == \"LIVE\"\n          ) {\n            isLive = true;\n          }\n        });\n      }\n      const id = videoRenderer.videoId;\n      const thumbnail = videoRenderer.thumbnail;\n      const title = videoRenderer.title.runs[0].text;\n      const shortBylineText = videoRenderer.shortBylineText\n        ? videoRenderer.shortBylineText\n        : \"\";\n      const lengthText = videoRenderer.lengthText\n        ? videoRenderer.lengthText\n        : \"\";\n      const channelTitle =\n        videoRenderer.ownerText && videoRenderer.ownerText.runs\n          ? videoRenderer.ownerText.runs[0].text\n          : \"\";\n      return {\n        id,\n        type: \"video\",\n        thumbnail,\n        title,\n        channelTitle,\n        shortBylineText,\n        length: lengthText,\n        isLive\n      };\n    } else {\n      return {};\n    }\n  } catch (ex) {\n    throw ex;\n  }\n};\n\nconst compactVideoRenderer = (json) => {\n  const compactVideoRendererJson = json.compactVideoRenderer;\n\n  var isLive = false;\n  if (\n    compactVideoRendererJson.badges &&\n    compactVideoRendererJson.badges.length > 0 &&\n    compactVideoRendererJson.badges[0].metadataBadgeRenderer &&\n    compactVideoRendererJson.badges[0].metadataBadgeRenderer.style ==\n      \"BADGE_STYLE_TYPE_LIVE_NOW\"\n  ) {\n    isLive = true;\n  }\n  const result = {\n    id: compactVideoRendererJson.videoId,\n    type: \"video\",\n    thumbnail: compactVideoRendererJson.thumbnail.thumbnails,\n    title: compactVideoRendererJson.title.simpleText,\n    channelTitle: compactVideoRendererJson.shortBylineText.runs[0].text,\n    shortBylineText: compactVideoRendererJson.shortBylineText.runs[0].text,\n    length: compactVideoRendererJson.lengthText,\n    isLive\n  };\n  return result;\n};\n\nconst GetShortVideo = async () => {\n  const page = await GetYoutubeInitData(youtubeEndpoint);\n  const shortResult =\n    await page.initdata.contents.twoColumnBrowseResultsRenderer.tabs[0].tabRenderer.content.richGridRenderer.contents\n      .filter((x) => {\n        return x.richSectionRenderer;\n      })\n      .map((z) => z.richSectionRenderer.content)\n      .filter((y) => y.richShelfRenderer)\n      .map((u) => u.richShelfRenderer)\n      .find((i) => i.title.runs[0].text == \"Shorts\");\n  const res = await shortResult.contents\n    .map((z) => z.richItemRenderer)\n    .map((y) => y.content.reelItemRenderer);\n  return await res.map((json) => ({\n    id: json.videoId,\n    type: \"reel\",\n    thumbnail: json.thumbnail.thumbnails[0],\n    title: json.headline.simpleText,\n    inlinePlaybackEndpoint: json.inlinePlaybackEndpoint || {}\n  }));\n};\n\nexports.GetListByKeyword = GetData;\nexports.NextPage = nextPage;\nexports.GetPlaylistData = GetPlaylistData;\nexports.GetSuggestData = GetSuggestData;\nexports.GetChannelById = GetChannelById;\nexports.GetVideoDetails = GetVideoDetails;\nexports.GetShortVideo = GetShortVideo;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/youtube-search-api@1.2.2/node_modules/youtube-search-api/index.js\n");

/***/ })

};
;